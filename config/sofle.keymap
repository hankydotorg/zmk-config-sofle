/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <2 1>;
            then-layer = <3>;
        };
    };

    behaviors {
        td_sel_blade: td_sel_blade {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SEL_BLADE";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp B>;
        };

        td_copy_up: td_copy_up {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COPY_UP";
            #binding-cells = <0>;
            bindings = <&kp UP_ARROW>, <&kp K_COPY>;
        };

        td_trim_slip: td_trim_slip {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TRIM_SLIP";
            #binding-cells = <0>;
            bindings = <&kp T>, <&kp W>;
        };

        td_in_out: td_in_out {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_IN_OUT";
            #binding-cells = <0>;
            bindings = <&kp I>, <&kp O>, <&kp LA(X)>;
        };

        td_paste: td_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PASTE";
            #binding-cells = <0>;
            bindings = <&kp LG(V)>, <&kp LA(V)>, <&kp LS(LG(V))>;
        };

        td_select_fw_bw: td_select_fw_bw {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SELECT_FW_BW";
            #binding-cells = <0>;
            bindings = <&kp LA(Y)>, <&kp LG(LS(Y))>, <&kp LG(LS(A))>;
        };

        td_fwd_play: td_fwd_play {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_FWD_PLAY";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>;
        };

        td_play_bw: td_play_bw {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PLAY_BW";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp LS(J)>;
        };

        td_play_fwd: td_play_fwd {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PLAY_FWD";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp LS(L)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&tog 1     &kp N1  &kp N2    &kp N3    &kp N4     &kp N5                                    &kp N6         &kp N7     &kp N8     &kp N9    &kp N0    &bl BL_TOG
&kp ESC    &kp Q   &kp W     &kp E     &kp R      &kp T                                     &kp Y          &kp U      &kp I      &kp O     &kp P     &kp BACKSPACE
&kp TAB    &kp A   &kp S     &kp D     &kp F      &kp G                                     &kp H          &kp J      &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X     &kp C     &kp V      &kp B      &kp C_MUTE    &none            &kp N          &kp M      &kp COMMA  &kp DOT   &kp FSLH  &kp ENTER
                   &kp LGUI  &kp LALT  &kp LCTRL  &kp SPACE  &kp LCMD      &kp RIGHT_SHIFT  &kp BACKSPACE  &kp MINUS  &kp RALT   &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |     | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |     | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //              |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&kp I             &td_in_out        &kp LG(EQUAL)     &kp LG(MINUS)   &kp LS(Z)      &kp M                                &trans     &trans    &trans    &trans     &trans   &trans
&td_trim_slip     &kp LA(F)         &kp LG(LA(L))     &kp N           &td_sel_blade  &kp D                                &kp PG_UP  &trans    &kp UP    &trans     &kp N0   &trans
&trans            &kp LEFT_CONTROL  &kp LEFT_COMMAND  &kp LSHFT       &kp LEFT_ALT   &kp P                                &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp DEL  &kp BSPC
&td_select_fw_bw  &kp K_UNDO        &kp K_CUT         &td_copy_up     &td_paste      &kp K_REDO   &trans          &trans  &trans     &trans    &trans    &trans     &trans   &trans
                                    &kp LEFT          &kp DOWN_ARROW  &kp RIGHT      &td_play_bw  &td_play_fwd    &trans  &trans     &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        lower_layer {
            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans     &kp F1     &kp F2     &kp F3       &kp F4    &kp F5                                &kp DELETE     &kp N7        &kp N8        &kp N9        &kp SLASH     &kp LEFT_PARENTHESIS
&kp GRAVE  &kp N1     &kp N2     &kp N3       &kp N4    &kp N5                                &kp BACKSPACE  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTERISK  &kp RIGHT_PARENTHESIS
&trans     &kp EXCL   &kp AT     &kp HASH     &kp DLLR  &kp PRCNT                             &kp ASTERISK   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS      &kp EQUAL
&trans     &kp EQUAL  &kp MINUS  &kp KP_PLUS  &kp LBRC  &kp RBRC   &trans    &trans           &kp SLASH      &kp DOT       &kp UP_ARROW  &kp PERCENT   &kp MINUS     &kp RET
                      &trans     &trans       &trans    &trans     &trans    &kp RIGHT_SHIFT  &kp N0         &kp LEFT      &kp DOWN      &kp RIGHT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        Adjust_layer {
            bindings = <
&bt BT_CLR                       &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                               &none  &none  &none  &none  &none  &none
&ext_power EXT_POWER_TOGGLE_CMD  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_EFF                            &none  &none  &none  &none  &none  &none
&none                            &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &none            &none            &none                                      &none  &none  &none  &none  &none  &none
&none                            &none            &none            &none            &none            &none            &rgb_ug RGB_TOG    &none  &none  &none  &none  &none  &none  &none
                                                  &none            &none            &none            &none            &none              &none  &none  &none  &none  &none
            >;
        };
    };
};
